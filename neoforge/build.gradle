plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive false }

    shadowCommon "com.github.umjammer:jlayer:${rootProject.jlayer_version}"
    shadowCommon("org.java-websocket:Java-WebSocket:${rootProject.java_websocket_version}") {
        exclude module: "slf4j-api"
    }

    modLocalRuntime ("dev.isxander:yet-another-config-lib:${rootProject.yacl_version}-neoforge") { transitive false }
}

processResources {
    inputs.property "version", rootProject.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": rootProject.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set "mc${rootProject.minecraft_version}-neoforge"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
